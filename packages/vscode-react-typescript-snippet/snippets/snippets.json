{
  "Luckly Vue": {
    "prefix": "tsvue",
    "body": [
      " <template>",
      "</template>",
      "<script lang=\"ts\">",

      "import { Component, Vue } from 'vue-property-decorator';",
      "@Component({ name: '${1:}' })",
      "export default class extends Vue {",
      "}",
      "</script>",

      "<style lang=\"less\">",

      "</style>"
    ],
    "description": "Lucky tools Vue Component with typescript."
  },
  "Luckly React Component": {
    "prefix": "tslrcc",
    "body": [
      "import * as React from 'react';",
      "",
      "export interface I${1:App}Props {",
      "}",
      "",
      "export default class ${1:} extends React.Component<I${1:}Props> {",
      "public render() {",
      "    return (",
      "      <div>",
      "        ${2:}",
      "      </div>",
      "    );",
      "  }",
      "}",
      ""
    ],
    "description": "Lucky tools React Component with typescript."
  },
  "Luckly React Component - Full": {
    "prefix": "tslrcstate",
    "body": [
      "import * as React from 'react';",
      "",
      "export interface I${1:App}Props {",
      "}",
      "",
      "export interface I${1:App}State {",
      "}",
      "",
      "export default class ${1:} extends React.Component<I${1:}Props, I${1:}State> {",
      "  constructor(props: I${1:}Props) {",
      "    super(props);",
      "",
      "    this.state = {",
      "    }",
      "  }",
      "",
      "public  render() {",
      "    return (",
      "      <div>",
      "        ${2:}",
      "      </div>",
      "    );",
      "  }",
      "}",
      ""
    ],
    "description": "Lucky tools Create a stateful React Component with typescript with Props, State, and a constructor."
  },

  "Luckly React PureComponent": {
    "prefix": "tslrpcc",
    "body": [
      "import * as React from 'react';",
      "",
      "export interface I${1:App}Props {",
      "}",
      "",
      "export default class ${1:} extends React.PureComponent<I${1:}Props> {",
      "public render() {",
      "    return (",
      "      <div>",
      "        ${2:}",
      "      </div>",
      "    );",
      "  }",
      "}",
      ""
    ],
    "description": "Lucky tools Create a React PureComponent."
  },

  "Luckly React Pure Function Component": {
    "prefix": "tslrpfc",
    "body": [
      "import * as React from 'react';",
      "",
      "export interface I${1:App}Props {",
      "}",
      "",
      "export function ${1:} (props: I${1:}Props) {",
      "public return (",
      "    <div>",
      "      ${0}",
      "    </div>",
      "  );",
      "}",
      ""
    ],
    "description": "Lucky tools Create a React Pure Function Component."
  },
  "Luckly Export Default React Pure Function Component": {
    "prefix": "tsldrpfc",
    "body": [
      "import * as React from 'react';",
      "",
      "export interface I${1:App}Props {",
      "}",
      "",
      "export default function ${1:} (props: I${1:}Props) {",
      "public return (",
      "    <div>",
      "      ${0}",
      "    </div>",
      "  );",
      "}",
      ""
    ],
    "description": "Lucky tools Create a default-exported React Pure Function Component."
  },
  "Luckly React Functional Component": {
    "prefix": "tslrfc",
    "body": [
      "import * as React from 'react';",
      "",
      "interface I${1:App}Props {$2",
      "}",
      "",
      "const ${1:}: React.FC<I${1:}Props> = (props) => {",
      "  return <div>${0}</div>;",
      "};",
      "",
      "export default ${1:};",
      ""
    ],
    "description": "Lucky tools Create a React Functional Component."
  },
  "Luckly constructor": {
    "prefix": "tslconc",
    "body": ["public constructor(props) {", "  super(props);", "  ${1:}", "}"],
    "description": "Lucky tools  Add a constructor in class."
  },
  "Luckly componentWillMount": {
    "prefix": "tslcwm",
    "body": ["public componentWillMount(): void {", "  ${1:}", "}"],
    "description": "Lucky tools  Invoked immediately before mounting occurs. It is called before render()."
  },
  "Luckly render": {
    "prefix": "tslren",
    "body": ["public render() {", "  return (", "    ${1:}", "  );", "}"],
    "description": "Lucky tools  When called, it should examine this.props and this.state and return a single React element."
  },
  "Luckly componentDidMount": {
    "prefix": "tslcdm",
    "body": ["public componentDidMount(): void{", "  ${1:}", "}"],
    "description": "Lucky tools  Invoked immediately after a component is mounted."
  },
  "Luckly componentWillReceiveProps": {
    "prefix": "tslcwrp",
    "body": [
      "public componentWillReceiveProps(nextProps: ${1:}): void {",
      "  ${2:}",
      "}"
    ],
    "description": "Lucky tools  Invoked before a mounted component receives new props."
  },
  "Luckly shouldComponentUpdate": {
    "prefix": "tslscu",
    "body": [
      "public shouldComponentUpdate(nextProps: ${1:}, nextState): void {",
      "  ${2:}",
      "}"
    ],
    "description": "Lucky tools  Invoked before rendering when new props or state are being received."
  },
  "Luckly componentWillUpdate": {
    "prefix": "tslcwu",
    "body": [
      "public componentWillUpdate(nextProps: ${1:}, nextState): void {",
      "  ${2:}",
      "}"
    ],
    "description": "Lucky tools  Invoked immediately before rendering when new props or state are being received."
  },
  "Luckly componentDidUpdate": {
    "prefix": "tslcdu",
    "body": [
      "public componentDidUpdate(prevProps: ${1:}, prevState): void {",
      "  ${2:}",
      "}"
    ],
    "description": "Lucky tools  Invoked immediately after updating occurs. This method is not called for the initial render"
  },
  "Luckly componentWillUnmount": {
    "prefix": "tslcwum",
    "body": ["public componentWillUnmount(): void {", "  ${1:}", "}"],
    "description": "Lucky tools Invoked immediately before a component is unmounted and destroyed"
  },
  "Luckly componentSetState": {
    "prefix": "tslsst",
    "body": ["this.setState(${1:});"],
    "description": "Lucky tools Performs a shallow merge of nextState into current state"
  },
  "Luckly bind method": {
    "prefix": "tslbnd",
    "body": ["this.${1:} = this.${1:}.bind(this);"],
    "description": "Lucky tools  bind this in method"
  },
  "Luckly method": {
    "prefix": "tslmet",
    "body": ["${1:methodName} = (${2:e}) => {", "  ${3:}", "}"],
    "description": "Lucky tools  Create a method"
  },
  "Luckly React redux container": {
    "prefix": "tslrcredux",
    "body": [
      "import * as React from 'react';",
      "import { connect } from 'react-redux'",
      "import { Dispatch } from 'redux'",
      "// you can define global interface ConnectState in @/state/connect.d",
      "import { ConnectState } from '@/state/connect.d';",
      "",
      "export interface I${1:App}Props {",
      "}",
      "",
      "export type ReduxType = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps> & I${1:App}Props;",
      "",
      "class ${1:} extends React.Component<ReduxType> {",
      "public  render() {",
      "    return (",
      "      <div>",
      "        ${2:}",
      "      </div>",
      "    );",
      "  }",
      "}",
      "",
      "const mapStateToProps = (state : ConnectState) => {",
      "  return {",
      "  };",
      "}",
      "const mapDispatchToProps  = (dispatch : Dispatch) => {",
      "  return {",
      "  };",
      "}",
      "",
      "export default connect(mapStateToProps,mapDispatchToProps)(${1:});",
      ""
    ],
    "description": "Lucky tools React Redux container"
  },
  "Luckly React redux function container": {
    "prefix": "tslrfredux",
    "body": [
      "import * as React from 'react';",
      "import { connect } from 'react-redux'",
      "import { Dispatch } from 'redux'",
      "import { ConnectState } from '@/state/connect.d';",
      "",
      "export interface I${1:App}Props {$2",
      "}",
      "",
      "export type ReduxType = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps> & I${1:App}Props;",
      "",
      "const ${1:}: React.FC<ReduxType> = (props) => {",
      "  return <div>${0}</div>;",
      "};",
      "",
      "const mapStateToProps = (state : ConnectState) => {",
      "  return {",
      "  };",
      "}",
      "const mapDispatchToProps  = (dispatch : Dispatch) => {",
      "  return {",
      "  };",
      "}",
      "",
      "export default connect(mapStateToProps,mapDispatchToProps)(${1:});",
      ""
    ],
    "description": "Lucky tools React Redux function container"
  },
  "Luckly import": {
    "prefix": "tslimt",
    "body": ["import { $2 } from '$1';"],
    "description": "Create a import"
  }
}
